name: Workload and errors sheduler concurrent workflow

on:
  workflow_call:
    inputs:
      language:
        description: 'SDK language or language+variant'
        default: 'nodejs'
        required: true
        type: string
      time_between_phases:
        description: 'Time to wait between phases (sleep command)'
        default: '1m'
        type: string
    secrets:
      KUBE_CONFIG:
        required: true

concurrency:
  group: ${{ github.ref }}-${{ inputs.language }}-test

jobs:
  run-workload:
    runs-on: ubuntu-latest
    steps:
      - name: Create ${{ inputs.language }} test run yaml
        # TODO: Here later will be kind: deployment instead of kind: job
        run: |
          cat > ${{ inputs.language }}-workload.yaml <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: ${{ inputs.language }}-workload
          spec:
            backoffLimit: 0
            template:
              metadata:
                name: ${{ inputs.language }}-workload
              spec:
                containers:
                - name: ${{ inputs.language }}-workload
                  image: cr.yandex/crpho4srfnemeb9mi57a/${{ inputs.language }}:latest
                  args:
                    - "grpc://database-sample-grpc:2135"
                    - "/root/database-sample"
                restartPolicy: Never
                imagePullSecrets:
                  - name: innerregistry
          EOF

      - name: Check builded yaml
        run: cat ${{ inputs.language }}-workload.yaml

      - name: Run workload
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: apply -f ${{ inputs.language }}-workload.yaml

      - name: Wait for workload to end
        uses: actions-hub/kubectl@master
        with:
          args: wait --for=condition=complete --timeout 5m job/${{ inputs.language }}-workload

  run-errors-sheduler:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: sleep ${{ inputs.time_between_phases }}
    
    - name: Get DB host's internal IP
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ inputs.KUBE_CONFIG }}
      with:
        args: get pods database-sample-0 -o=jsonpath='{.status.podIP}'
        redirect-to: $MARTYR_IP

    - name: Show DB host's internal IP
      run: echo ${MARTYR_IP}

    - name: Freeze tablet
      uses: actions-hub/kubectl@master
      with:
        args: >
          run -it --image=busybox --rm tablet-freezer --restart=Never -- sh -c "wget -q -O-
          '${MARTYR_IP}:8765/tablets/app?TabletID=72057594037968897&node=1&page=SetFreeze&freeze=1'"
    
    - run: sleep ${{ inputs.time_between_phases }}

    - name: Unfreeze tablet
      uses: actions-hub/kubectl@master
      with:
        args: >
          run -it --image=busybox --rm tablet-freezer --restart=Never -- sh -c "wget -q -O-
          '${MARTYR_IP}:8765/tablets/app?TabletID=72057594037968897&node=1&page=SetFreeze&freeze=0'"
    
    - run: sleep ${{ inputs.time_between_phases }}

    - name: Delete database pod (it will automatically restart)
      uses: actions-hub/kubectl@master
      with:
        args: delete pod database-sample-1
    
    - run: sleep ${{ inputs.time_between_phases }}

    - name: Hard shutdown database pod (it will automatically restart)
      uses: actions-hub/kubectl@master
      with:
        args: delete pod database-sample-1 --force=true --now=true
    
    - run: sleep ${{ inputs.time_between_phases }}

    - name: Kill pod from inside
      uses: actions-hub/kubectl@master
      with:
        args: exec -it database-sample-0 -- /bin/bash -c "kill -2 1 && echo 'process killed'";
    
    - run: sleep ${{ inputs.time_between_phases }}
